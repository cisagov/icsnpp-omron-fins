module OMRON_FINS_COMMAND_CODE_08;

import spicy;
import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;
import OMRON_FINS_TYPES;

#
# Loop-back Test Internode Echo Test
#
type LoopBackTest = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : LoopBackTest_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: LoopBackTest_Response();
    };
};

type LoopBackTest_Command = unit {
    testData : bytes &eod &convert=OMRON_FINS_FUNCTIONS::bytesToHexString($$);
};

type LoopBackTest_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    testData : bytes &eod &convert=OMRON_FINS_FUNCTIONS::bytesToHexString($$);
};

#
# Broadcast Test Results Read
#
type BroadcastTestResultsRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : BroadcastTestResultsRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: BroadcastTestResultsRead_Response();
    };
};

type BroadcastTestResultsRead_Command = unit {
    : bytes &eod; # Note: There is no data associated with the Broadcast Test Result Read command - hence the anonymous field
};

type BroadcastTestResultsRead_Response = unit {
    responseCode       : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    numberOfReceptions : uint16;
};

#
# Broadcast Test Data Send
#
type BroadcastTestDataSend = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : BroadcastTestDataSend_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: BroadcastTestDataSend_Response();
    };
};

type BroadcastTestDataSend_Command = unit {
    testData : bytes &eod &convert=OMRON_FINS_FUNCTIONS::bytesToHexString($$);
};

type BroadcastTestDataSend_Response = unit {
    : bytes &eod; # Note: There is no data associated with the Broadcast Test Data Send command - hence the anonymous field
};

