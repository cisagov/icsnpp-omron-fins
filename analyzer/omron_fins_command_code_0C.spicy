module OMRON_FINS_COMMAND_CODE_0C;

import spicy;
import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;
import OMRON_FINS_TYPES;

#
# Access Right Acquire
#
type AccessRightAcquire = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : AccessRightAcquire_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: AccessRightAcquire_Response();
    };
};

type AccessRightAcquire_Command = unit {
    programNo : uint16;
};

type AccessRightAcquire_Response = unit {
    var networkAddress : uint8;
    var nodeNumber     : uint8;
    var unitAddress    : uint8;

    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    restOfData   : bytes &eod;

    on %done {
        if (|self.restOfData| > 0) {
            self.networkAddress = *self.restOfData.at(0);
            self.nodeNumber     = *self.restOfData.at(1);
            self.unitAddress    = *self.restOfData.at(2);
        }
    }
};

#
# Access Right Forced Acquire
#
type AccessRightForcedAcquire = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : AccessRightForcedAcquire_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: AccessRightForcedAcquire_Response();
    };
};

type AccessRightForcedAcquire_Command = unit {
    programNo : uint16;
};

type AccessRightForcedAcquire_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    : bytes &eod;
};

#
# Access Right Release
#
type AccessRightRelease = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : AccessRightRelease_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: AccessRightRelease_Response();
    };
};

type AccessRightRelease_Command = unit {
    programNo : uint16;
};

type AccessRightRelease_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    : bytes &eod;
};
