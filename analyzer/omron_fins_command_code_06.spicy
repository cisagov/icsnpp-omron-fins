module OMRON_FINS_COMMAND_CODE_06;

import spicy;
import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;
import OMRON_FINS_TYPES;

#
# Controller Status Read
#
type ControllerStatusRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : ControllerStatusRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: ControllerStatusRead_Response();
    };
};

public type ControllerStatusRead_Command = unit {
        : bytes &eod; # Note: There is no data associated with the Controller Status Read command - hence the anonymous field
};

public type ControllerStatusRead_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    status       : uint8  &convert=OMRON_FINS_ENUMS::ControllerStatusReadStatus($$);
    mode         : uint8  &convert=OMRON_FINS_ENUMS::ControllerStatusReadMode($$);

    # Fatal Error Data
    var fatalErrorDataVec: vector<string>;
    fatalErrorData : bitfield(16) {
        watchDogTimerError : 0;
        reserved           : 1..5;
        falsError          : 6;
        fatalSFCError      : 7;
        cycleTimeOver      : 8;
        programError       : 9;
        ioSettingError     : 10;
        ioPointOverflow    : 11;
        cpuBusError        : 12;
        duplicationError   : 13;
        ioBusError         : 14;
        memoryError        : 15;
    };
    on fatalErrorData {
        local watchDogTimerErrorStr = "Watch dog timer error: %d" % self.fatalErrorData.watchDogTimerError;
        local falsErrorStr          = "FALS error: %d"            % self.fatalErrorData.falsError;
        local fatalSFCErrorStr      = "Fatal SFC error: %d"       % self.fatalErrorData.fatalSFCError;
        local cycleTimeOverStr      = "Cycle time over: %d"       % self.fatalErrorData.cycleTimeOver;
        local programErrorStr       = "Program error: %d"         % self.fatalErrorData.programError;
        local ioSettingErrorStr     = "I/O setting error: %d"     % self.fatalErrorData.ioSettingError;
        local ioPointOverflowStr    = "I/O point overflow: %d"    % self.fatalErrorData.ioPointOverflow;
        local cpuBusErrorStr        = "CPU bus error: %d"         % self.fatalErrorData.cpuBusError;
        local duplicationErrorStr   = "Duplication error: %d"     % self.fatalErrorData.duplicationError;
        local ioBusErrorStr         = "I/O bus error: %d"         % self.fatalErrorData.ioBusError;
        local memoryErrorStr        = "Memory error: %d"          % self.fatalErrorData.memoryError;

        self.fatalErrorDataVec = [watchDogTimerErrorStr, falsErrorStr, fatalSFCErrorStr, cycleTimeOverStr, programErrorStr, ioSettingErrorStr,
                                  ioPointOverflowStr, cpuBusErrorStr, duplicationErrorStr, ioBusErrorStr, memoryErrorStr];

    }

    # Non Fatal Error Data
    var nonFatalErrorDataVec : vector<string>;
    nonFatalErrorData : bitfield(16) {
        reserved_0_1               : 0..1;
        momentaryPowerInterruption : 2;
        cpuBusUnitSettingError     : 3;
        batteryError               : 4;
        sysmacBusError             : 5;
        sysmacBus2Error            : 6;
        cpuBusUnitError            : 7;
        reserved_8                 : 8;
        ioVerificationError        : 9;
        reserved_10                : 10;
        nonFatalSFCError           : 11;
        indirectDMError            : 12;
        jmpError                   : 13;
        reserved_14                : 14;
        falError                   : 15;
    };
    on nonFatalErrorData {
        local momentaryPowerInterruptionStr = "Momentary poser interruption: %d" % self.nonFatalErrorData.momentaryPowerInterruption;
        local cpuBusUnitSettingErrorStr     = "CPU Bus Unit setting error: %d"   % self.nonFatalErrorData.cpuBusUnitSettingError;
        local batteryErrorStr               = "Battery error: %d"                % self.nonFatalErrorData.batteryError;
        local sysmacBusErrorStr             = "SYSMAC BUS error: %d"             % self.nonFatalErrorData.sysmacBusError;
        local sysmacBus2ErrorStr            = "SYSMAC BUS/2 error: %d"           % self.nonFatalErrorData.sysmacBus2Error;
        local cpuBusUnitErrorStr            = "CPU Bus Unit error: %d"           % self.nonFatalErrorData.cpuBusUnitError;
        local ioVerificationErrorStr        = "I/O verification error: %d"       % self.nonFatalErrorData.ioVerificationError;
        local nonFatalSFCErrorStr           = "Non-fatal SFC error: %d"          % self.nonFatalErrorData.nonFatalSFCError;
        local indirectDMErrorStr            = "Indirect DM error: %d"            % self.nonFatalErrorData.indirectDMError;
        local jmpErrorStr                   = "JMP error: %d"                    % self.nonFatalErrorData.jmpError;
        local falErrorStr                   = "FAL error: %d"                    % self.nonFatalErrorData.falError;

        self.nonFatalErrorDataVec = [momentaryPowerInterruptionStr, cpuBusUnitSettingErrorStr, batteryErrorStr, sysmacBusErrorStr,
                                     sysmacBus2ErrorStr, cpuBusUnitErrorStr, ioVerificationErrorStr, nonFatalSFCErrorStr, indirectDMErrorStr,
                                     indirectDMErrorStr, jmpErrorStr, falErrorStr];

    }

    # Message yes/no
    var messageYesNoVec : vector<string>;
    messageYesNo : bitfield(16) {
        messageNo_0   : 0;
        messageNo_1   : 1;
        messageNo_2   : 2;
        messageNo_3   : 3;
        messageNo_4   : 4;
        messageNo_5   : 5;
        messageNo_6   : 6;
        messageNo_7   : 7;
        reserved_8_15 : 8..15;
    };
    on messageYesNo {

        local messageNo_0_str = "Message no. 0: %d" % self.messageYesNo.messageNo_0;
        local messageNo_1_str = "Message no. 1: %d" % self.messageYesNo.messageNo_1;
        local messageNo_2_str = "Message no. 2: %d" % self.messageYesNo.messageNo_2;
        local messageNo_3_str = "Message no. 3: %d" % self.messageYesNo.messageNo_3;
        local messageNo_4_str = "Message no. 4: %d" % self.messageYesNo.messageNo_4;
        local messageNo_5_str = "Message no. 5: %d" % self.messageYesNo.messageNo_5;
        local messageNo_6_str = "Message no. 6: %d" % self.messageYesNo.messageNo_6;
        local messageNo_7_str = "Message no. 7: %d" % self.messageYesNo.messageNo_7;

        self.messageYesNoVec = [messageNo_0_str, messageNo_1_str, messageNo_2_str, messageNo_3_str,
                                messageNo_4_str, messageNo_5_str, messageNo_6_str, messageNo_7_str];
    }

    falFalsNo    : uint16;
    errorMessage : bytes &size=16;
};

#
# Network Status Read
#
type NetworkStatusRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : NetworkStatusRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: NetworkStatusRead_Response();
    };
};

type NetworkStatusRead_Command = unit {
    : bytes &eod; # Note: There is no data associated with the Network Status Read command - hence the anonymous field
};

type NetworkStatusRead_Response = unit {
    responseCode             : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    networkMemberData        : OMRON_FINS_TYPES::NetworkMemberData();
    communicationCycleTime   : uint16; # 4-digit hexadecimal number
    currentPollingNodeNumber : uint8;
    cyclicOperation          : uint8 &convert=OMRON_FINS_ENUMS::CyclicOperation($$);
    cyclicTransmissionStatus : uint8 &convert=OMRON_FINS_ENUMS::CyclicTransmissionStatus($$);
    cyclicNonFatalErrors     : OMRON_FINS_TYPES::CyclicNonFatalErrors();
    cyclicErrorCounters      : uint8[62]; # 62 2-digit hexadecimal number(s)
};

#
# Data Link Status Read
#
type DataLinkStatusRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : DataLinkStatusRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: DataLinkStatusRead_Response();
    };
};

type DataLinkStatusRead_Command = unit {
    data    : bytes &eod;
};

type DataLinkStatusRead_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    data    : bytes &eod;
};

#
# Cycle Time Read
#
type CycleTimeRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : CycleTimeRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: CycleTimeRead_Response();
    };
};

type CycleTimeRead_Command = unit {
    parameter : uint8 &convert=OMRON_FINS_ENUMS::CycleTimeReadParameter($$);
};

#
# The response consists of a respose code, an average cycle time, max cycle time, 
# and a min cycle time. The cycle times consist of 8 digits encoded as 4-bit BCD 
# values taking a total of 4 bytes to encode.
# 
# BCD Reference:
#      https://en.wikipedia.org/wiki/Binary-coded_decimal
# 
type CycleTimeRead_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);

    var averageCycleTime : real;
    averageCycleTimeBCD  : bitfield(32) {
        digit1 : 0..3   &convert=$$ * 1;
        digit2 : 4..7   &convert=$$ * 10;
        digit3 : 8..11  &convert=$$ * 100;
        digit4 : 12..15 &convert=$$ * 1000;
        digit5 : 16..19 &convert=$$ * 10000;
        digit6 : 20..23 &convert=$$ * 100000;
        digit7 : 24..27 &convert=$$ * 1000000;
        digit8 : 28..31 &convert=$$ * 10000000;
    };

    var maxCycleTime : real;
    maxCycleTimeBCD  : bitfield(32) {
        digit1 : 0..3   &convert=$$ * 1;
        digit2 : 4..7   &convert=$$ * 10;
        digit3 : 8..11  &convert=$$ * 100;
        digit4 : 12..15 &convert=$$ * 1000;
        digit5 : 16..19 &convert=$$ * 10000;
        digit6 : 20..23 &convert=$$ * 100000;
        digit7 : 24..27 &convert=$$ * 1000000;
        digit8 : 28..31 &convert=$$ * 10000000;
    };

    var minCycleTime : real;
    minCycleTimeBCD  : bitfield(32) {
        digit1 : 0..3   &convert=$$ * 1;
        digit2 : 4..7   &convert=$$ * 10;
        digit3 : 8..11  &convert=$$ * 100;
        digit4 : 12..15 &convert=$$ * 1000;
        digit5 : 16..19 &convert=$$ * 10000;
        digit6 : 20..23 &convert=$$ * 100000;
        digit7 : 24..27 &convert=$$ * 1000000;
        digit8 : 28..31 &convert=$$ * 10000000;
    };

    on %done {
        self.averageCycleTime = cast<real>(self.averageCycleTimeBCD.digit1 + 
                                           self.averageCycleTimeBCD.digit2 +
                                           self.averageCycleTimeBCD.digit3 +
                                           self.averageCycleTimeBCD.digit4 +
                                           self.averageCycleTimeBCD.digit5 +
                                           self.averageCycleTimeBCD.digit6 +
                                           self.averageCycleTimeBCD.digit7 +
                                           self.averageCycleTimeBCD.digit8) * 0.1;

        self.maxCycleTime = cast<real>(self.maxCycleTimeBCD.digit1 + 
                                       self.maxCycleTimeBCD.digit2 +
                                       self.maxCycleTimeBCD.digit3 +
                                       self.maxCycleTimeBCD.digit4 +
                                       self.maxCycleTimeBCD.digit5 +
                                       self.maxCycleTimeBCD.digit6 +
                                       self.maxCycleTimeBCD.digit7 +
                                       self.maxCycleTimeBCD.digit8) * 0.1;

        self.minCycleTime = cast<real>(self.minCycleTimeBCD.digit1 + 
                                       self.minCycleTimeBCD.digit2 +
                                       self.minCycleTimeBCD.digit3 +
                                       self.minCycleTimeBCD.digit4 +
                                       self.minCycleTimeBCD.digit5 +
                                       self.minCycleTimeBCD.digit6 +
                                       self.minCycleTimeBCD.digit7 +
                                       self.minCycleTimeBCD.digit8) * 0.1;

    }
};
