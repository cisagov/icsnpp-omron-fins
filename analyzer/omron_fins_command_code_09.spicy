module OMRON_FINS_COMMAND_CODE_09;

import spicy;
import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;
import OMRON_FINS_TYPES;

#
# MESSAGE_READ_MESSAGE_WRITE_FAL_FALS_READ
#
# The Message Read, Message Clear, and Fal/Fals commands share the same command 
# code (0x0929).  They commands are distinguished by bits 14 and 15 of the two-byte
# parameter following the command code and the response code.  Bits 14 and 15 are 
# as follows:
#   Bit 15 14
#        0  0 - Read Message  
#        0  1 - Message Clear 
#        1  0 - Fal/Fals Read
# 
type MessageRead_MessageWrite_FalFalsRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : MessageRead_MessageWrite_FalFalsRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: MessageRead_MessageWrite_FalFalsRead_Response();
    };
};

type MessageRead_MessageWrite_FalFalsRead_Command = unit {
    messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter;
    switch(self.messageNoParameter.messageType) {
        OMRON_FINS_ENUMS::MessageNoParameter::MESSAGE_READ  -> message_read_command  : MessageRead_Command(self.messageNoParameter);
        OMRON_FINS_ENUMS::MessageNoParameter::MESSAGE_CLEAR -> message_clear_command : MessageClear_Command(self.messageNoParameter);
        OMRON_FINS_ENUMS::MessageNoParameter::FAL_FALS_READ -> fal_fals_read_command : FalFalsRead_Command(self.messageNoParameter);
    };

    on %done {
        print self;
    }

};

type MessageRead_MessageWrite_FalFalsRead_Response = unit {
    responseCode       : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    restOfData         : bytes &eod;

    messageRead_FalFalsRead : MessageRead_FalFalsRead(self.restOfData) if (|self.restOfData| > 0);
};

type MessageRead_FalFalsRead = unit(restOfData : bytes) {

    var messageType : OMRON_FINS_ENUMS::MessageNoParameter = OMRON_FINS_ENUMS::MessageNoParameter(*restOfData.at(0) >> 6);
    #KILLME var messageType : OMRON_FINS_ENUMS::MessageNoParameter = OMRON_FINS_ENUMS::MessageNoParameter(2);
    switch(self.messageType) {
        OMRON_FINS_ENUMS::MessageNoParameter::MESSAGE_READ  -> message_read_response  : MessageRead_Response(restOfData);
        OMRON_FINS_ENUMS::MessageNoParameter::FAL_FALS_READ -> fal_fals_read_response : FalFalsRead_Response(restOfData);
        *                                                   -> unknown_message_type   : bytes &eod;
    };
};

#
# Message Read Command/Response
#
type MessageRead_Command = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod;
};

type MessageRead_Response = unit(restOfData : bytes) {
    var messageNoBits  : uint8;

    var messageNoBit_0 : bool;
    var messageNoBit_1 : bool;
    var messageNoBit_2 : bool;
    var messageNoBit_3 : bool;
    var messageNoBit_4 : bool;
    var messageNoBit_5 : bool;
    var messageNoBit_6 : bool;
    var messageNoBit_7 : bool;

    var messageNo_0    : string;
    var messageNo_1    : string;
    var messageNo_2    : string;
    var messageNo_3    : string;
    var messageNo_4    : string;
    var messageNo_5    : string;
    var messageNo_6    : string;
    var messageNo_7    : string;

    on %done {

        self.messageNoBits = *restOfData.at(1);
        #KILLME self.messageNoBits = 0x07;

        self.messageNoBit_0 = (self.messageNoBits & 0x01) != 0;
        if (self.messageNoBit_0) {
            self.messageNo_0 = restOfData.sub(2,34).decode();
        }

        self.messageNoBit_1 = (self.messageNoBits & 0x02) != 0;
        if (self.messageNoBit_1) {
            self.messageNo_1 = restOfData.sub(34,66).decode();
        }

        self.messageNoBit_2 = (self.messageNoBits & 0x04) != 0;
        if (self.messageNoBit_2) {
            self.messageNo_2 = restOfData.sub(66,98).decode();
        }

        self.messageNoBit_3 = (self.messageNoBits & 0x08) != 0;
        if (self.messageNoBit_3) {
            self.messageNo_3 = restOfData.sub(98,130).decode();
        }

        self.messageNoBit_4 = (self.messageNoBits & 0x10) != 0;
        if (self.messageNoBit_4) {
            self.messageNo_4 = restOfData.sub(130,162).decode();
        }
        self.messageNoBit_5 = (self.messageNoBits & 0x20) != 0;
        if (self.messageNoBit_5) {
            self.messageNo_5 = restOfData.sub(162,194).decode();
        }
        self.messageNoBit_6 = (self.messageNoBits & 0x40) != 0;
        if (self.messageNoBit_6) {
            self.messageNo_6 = restOfData.sub(194,226).decode();
        }
        self.messageNoBit_7 = (self.messageNoBits & 0x80) != 0;
        if (self.messageNoBit_7) {
            self.messageNo_7 = restOfData.sub(226,258).decode();
        }

#        print self;
    }
};

#
# Message Clear Command/Response
#
type MessageClear_Command = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod;
};

type MessageClear_Response = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod;
};

#
# FAL/FALS Read Command/Reponse
#
type FalFalsRead_Command = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod;
};

type FalFalsRead_Response = unit(restOfData : bytes) {
    var falFalsNoBits  : uint16;

    var falFalsNoBit_0  : bool;
    var falFalsNoBit_1  : bool;
    var falFalsNoBit_2  : bool;
    var falFalsNoBit_3  : bool;
    var falFalsNoBit_4  : bool;
    var falFalsNoBit_5  : bool;
    var falFalsNoBit_6  : bool;
    var falFalsNoBit_7  : bool;
    var falFalsNoBit_8  : bool;
    var falFalsNoBit_9  : bool;
    var falFalsNoBit_10 : bool;
    var falFalsNoBit_11 : bool;
    var falFalsNoBit_12 : bool;
    var falFalsNoBit_13 : bool;

    var falFalsNo_0     : string;
    var falFalsNo_1     : string;
    var falFalsNo_2     : string;
    var falFalsNo_3     : string;
    var falFalsNo_4     : string;
    var falFalsNo_5     : string;
    var falFalsNo_6     : string;
    var falFalsNo_7     : string;
    var falFalsNo_8     : string;
    var falFalsNo_9     : string;
    var falFalsNo_10    : string;
    var falFalsNo_11    : string;
    var falFalsNo_12    : string;
    var falFalsNo_13    : string;

    on %done {

        self.falFalsNoBits = (*restOfData.at(1) << 8) | *restOfData.at(0);
        #KILLME self.falFalsNoBits = 0x01;

        self.falFalsNoBit_0 = (self.falFalsNoBits & 0x0001) != 0;
        if (self.falFalsNoBit_0) {
            self.falFalsNo_0 = restOfData.sub(2,18).decode();
        }

        self.falFalsNoBit_1 = (self.falFalsNoBits & 0x0002) != 0;
        if (self.falFalsNoBit_1) {
            self.falFalsNo_1 = restOfData.sub(18,34).decode();
        }

        self.falFalsNoBit_2 = (self.falFalsNoBits & 0x0004) != 0;
        if (self.falFalsNoBit_2) {
            self.falFalsNo_2 = restOfData.sub(34,50).decode();
        }

        self.falFalsNoBit_3 = (self.falFalsNoBits & 0x0008) != 0;
        if (self.falFalsNoBit_3) {
            self.falFalsNo_3 = restOfData.sub(50,66).decode();
        }

        self.falFalsNoBit_4 = (self.falFalsNoBits & 0x0010) != 0;
        if (self.falFalsNoBit_4) {
            self.falFalsNo_4 = restOfData.sub(66,82).decode();
        }

        self.falFalsNoBit_5 = (self.falFalsNoBits & 0x0020) != 0;
        if (self.falFalsNoBit_5) {
            self.falFalsNo_5 = restOfData.sub(82,98).decode();
        }

        self.falFalsNoBit_6 = (self.falFalsNoBits & 0x0040) != 0;
        if (self.falFalsNoBit_6) {
            self.falFalsNo_6 = restOfData.sub(98,114).decode();
        }

        self.falFalsNoBit_7 = (self.falFalsNoBits & 0x0080) != 0;
        if (self.falFalsNoBit_7) {
            self.falFalsNo_7 = restOfData.sub(114,130).decode();
        }

        self.falFalsNoBit_8 = (self.falFalsNoBits & 0x0100) != 0;
        if (self.falFalsNoBit_8) {
            self.falFalsNo_8 = restOfData.sub(130,146).decode();
        }

        self.falFalsNoBit_9 = (self.falFalsNoBits & 0x0200) != 0;
        if (self.falFalsNoBit_9) {
            self.falFalsNo_9 = restOfData.sub(146,162).decode();
        }

        self.falFalsNoBit_10 = (self.falFalsNoBits & 0x0400) != 0;
        if (self.falFalsNoBit_10) {
            self.falFalsNo_10 = restOfData.sub(162,178).decode();
        }

        self.falFalsNoBit_11 = (self.falFalsNoBits & 0x0800) != 0;
        if (self.falFalsNoBit_11) {
            self.falFalsNo_11 = restOfData.sub(178,194).decode();
        }

        self.falFalsNoBit_12 = (self.falFalsNoBits & 0x1000) != 0;
        if (self.falFalsNoBit_12) {
            self.falFalsNo_12 = restOfData.sub(194,210).decode();
        }

        self.falFalsNoBit_13 = (self.falFalsNoBits & 0x2000) != 0;
        if (self.falFalsNoBit_13) {
            self.falFalsNo_13 = restOfData.sub(210,226).decode();
        }

       print self;
    }
};

