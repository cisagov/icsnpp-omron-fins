module OMRON_FINS_COMMAND_CODE_09;

import spicy;
import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;
import OMRON_FINS_TYPES;

#
# MESSAGE_READ_MESSAGE_WRITE_FAL_FALS_READ
#
# The Message Read, Message Clear, and Fal/Fals commands share the same command 
# code (0x0929).  They commands are distinguished by bits 14 and 15 of the two-byte
# parameter following the command code and the response code.  Bits 14 and 15 are 
# as follows:
#   Bit 15 14
#        0  0 - Read Message  
#        0  1 - Message Clear 
#        1  0 - Fal/Fals Read
# 
type MessageRead_MessageClear_FalFalsRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : MessageRead_MessageClear_FalFalsRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: MessageRead_MessageClear_FalFalsRead_Response();
    };
};

type MessageRead_MessageClear_FalFalsRead_Command = unit {
    messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter;
    switch(self.messageNoParameter.messageType) {
        OMRON_FINS_ENUMS::MessageType::MESSAGE_READ  -> message_read_command  : MessageRead_Command(self.messageNoParameter);
        OMRON_FINS_ENUMS::MessageType::MESSAGE_CLEAR -> message_clear_command : MessageClear_Command(self.messageNoParameter);
        OMRON_FINS_ENUMS::MessageType::FAL_FALS_READ -> fal_fals_read_command : FalFalsRead_Command(self.messageNoParameter);
    };
};

#
# Processing the MESSAGE READ, MESSAGE CLEAR, and FAL FALS READ repsponse is more complex than your standard Spicy
# parsing.  The response for MESSAGE CLEAR only contains a response code, while the response for MESSAGE READ 
# and FAL FALS READ contain additional information (Message No parameter or FAL/FALS No).  From the additional
# information, the messageType (MESSAGE READ or FAL FALS READ) can be determined.  In order to correctly process
# the response, we default to a messageType of MESSAGE CLEAR, parse the responseCode, then parse the restOfData (if any).
# Parsing the restOfData is necessary in order to keep the parser from erroring out with a 'ERROR: expecting 1 bytes 
# for unpacking value (0 bytes available)' if we try to parse a unit8 that may or may not exist.
# If self.restOfData has a length greater than 0, the messageType is determined by right shifting the 0th element
# of the self.restOfData vector.  Further processing for the messageType(s) MESSAGE READ and FAL FALS READ is
# done by accessing data in the self.restOfData.  Bottom line, it's not pretty, but it works :-)
#
type MessageRead_MessageClear_FalFalsRead_Response = unit {
    var messageType : OMRON_FINS_ENUMS::MessageType = OMRON_FINS_ENUMS::MessageType(1);

    responseCode    : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    restOfData      : bytes &eod;

    on restOfData {
        if (|self.restOfData| > 0) {
            self.messageType = OMRON_FINS_ENUMS::MessageType(*self.restOfData.at(0) >> 6);
        }
    }

    messageRead_FalFalsRead : MessageRead_FalFalsRead(self.messageType, self.restOfData) if (|self.restOfData| > 0);
};

type MessageRead_FalFalsRead = unit(messageType: OMRON_FINS_ENUMS::MessageType, restOfData : bytes) {

    switch(messageType) {
        OMRON_FINS_ENUMS::MessageType::MESSAGE_READ  -> message_read_response  : MessageRead_Response(restOfData);
        OMRON_FINS_ENUMS::MessageType::FAL_FALS_READ -> fal_fals_read_response : FalFalsRead_Response(restOfData);
        *                                                   -> unknown_message_type   : bytes &eod;
    };
};

#
# Message Read Command/Response
#
type MessageRead_Command = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod; # Note: There is no data associated with the Message Read command - hence the anonymous field.
};

type MessageRead_Response = unit(restOfData : bytes) {
    var messageNoBits  : uint8;

    var messageNoBit_0 : OMRON_FINS_ENUMS::Enabled;
    var messageNoBit_1 : OMRON_FINS_ENUMS::Enabled;
    var messageNoBit_2 : OMRON_FINS_ENUMS::Enabled;
    var messageNoBit_3 : OMRON_FINS_ENUMS::Enabled;
    var messageNoBit_4 : OMRON_FINS_ENUMS::Enabled;
    var messageNoBit_5 : OMRON_FINS_ENUMS::Enabled;
    var messageNoBit_6 : OMRON_FINS_ENUMS::Enabled;
    var messageNoBit_7 : OMRON_FINS_ENUMS::Enabled;

    var messageNo_0    : string;
    var messageNo_1    : string;
    var messageNo_2    : string;
    var messageNo_3    : string;
    var messageNo_4    : string;
    var messageNo_5    : string;
    var messageNo_6    : string;
    var messageNo_7    : string;

    on %done {

        self.messageNoBits = *restOfData.at(1);

        self.messageNoBit_0 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x01));
        if (self.messageNoBit_0 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_0 = restOfData.sub(2,34).decode();
        }

        self.messageNoBit_1 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x02) >> 1);
        if (self.messageNoBit_1 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_1 = restOfData.sub(34,66).decode();
        }

        self.messageNoBit_2 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x04) >> 2);
        if (self.messageNoBit_2 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_2 = restOfData.sub(66,98).decode();
        }

        self.messageNoBit_3 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x08) >> 3);
        if (self.messageNoBit_3 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_3 = restOfData.sub(98,130).decode();
        }

        self.messageNoBit_4 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x10) >> 4);
        if (self.messageNoBit_4 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_4 = restOfData.sub(130,162).decode();
        }

        self.messageNoBit_5 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x20) >> 5);
        if (self.messageNoBit_5 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_5 = restOfData.sub(162,194).decode();
        }

        self.messageNoBit_6 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x40) >> 6);
        if (self.messageNoBit_6 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_6 = restOfData.sub(194,226).decode();
        }

        self.messageNoBit_7 = OMRON_FINS_ENUMS::Enabled((self.messageNoBits & 0x80) >> 7);
        if (self.messageNoBit_7 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.messageNo_7 = restOfData.sub(226,258).decode();
        }
    }
};

#
# Message Clear Command/Response
#
type MessageClear_Command = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod; # Note: There is no data associated with the Messsage Clear command - hence the anonymous field
};

type MessageClear_Response = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod; # Note: There is no data associated with the Message Clear response - hence the anonymous field
};

#
# FAL/FALS Read Command/Reponse
#
type FalFalsRead_Command = unit(messageNoParameter : OMRON_FINS_TYPES::MessageNoParameter) {
    : bytes &eod; # Note: There is no data associated with the FAL/FALS Read command - hence the anonymous field
};

type FalFalsRead_Response = unit(restOfData : bytes) {
    var falFalsNoBits  : uint16;

    var falFalsNoBit_0  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_1  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_2  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_3  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_4  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_5  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_6  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_7  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_8  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_9  : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_10 : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_11 : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_12 : OMRON_FINS_ENUMS::Enabled;
    var falFalsNoBit_13 : OMRON_FINS_ENUMS::Enabled;

    var falFalsNo_0     : string;
    var falFalsNo_1     : string;
    var falFalsNo_2     : string;
    var falFalsNo_3     : string;
    var falFalsNo_4     : string;
    var falFalsNo_5     : string;
    var falFalsNo_6     : string;
    var falFalsNo_7     : string;
    var falFalsNo_8     : string;
    var falFalsNo_9     : string;
    var falFalsNo_10    : string;
    var falFalsNo_11    : string;
    var falFalsNo_12    : string;
    var falFalsNo_13    : string;

    on %done {

        self.falFalsNoBits = (*restOfData.at(1) << 8) | *restOfData.at(0);

        self.falFalsNoBit_0 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0001));
        if (self.falFalsNoBit_0 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_0 = restOfData.sub(2,18).decode();
        }

        self.falFalsNoBit_1 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0002) >> 1);
        if (self.falFalsNoBit_1 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_1 = restOfData.sub(18,34).decode();
        }

        self.falFalsNoBit_2 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0004) >> 2);
        if (self.falFalsNoBit_2 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_2 = restOfData.sub(34,50).decode();
        }

        self.falFalsNoBit_3 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0008) >> 3);
        if (self.falFalsNoBit_3 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_3 = restOfData.sub(50,66).decode();
        }

        self.falFalsNoBit_4 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0010) >> 4);
        if (self.falFalsNoBit_4 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_4 = restOfData.sub(66,82).decode();
        }

        self.falFalsNoBit_5 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0020) >> 5);
        if (self.falFalsNoBit_5 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_5 = restOfData.sub(82,98).decode();
        }

        self.falFalsNoBit_6 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0040) >> 6);
        if (self.falFalsNoBit_6 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_6 = restOfData.sub(98,114).decode();
        }

        self.falFalsNoBit_7 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0080) >> 7);
        if (self.falFalsNoBit_7 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_7 = restOfData.sub(114,130).decode();
        }

        self.falFalsNoBit_8 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0100) >> 8);
        if (self.falFalsNoBit_8 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_8 = restOfData.sub(130,146).decode();
        }

        self.falFalsNoBit_9 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0200) >> 9);
        if (self.falFalsNoBit_9 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_9 = restOfData.sub(146,162).decode();
        }

        self.falFalsNoBit_10 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0400) >> 10);
        if (self.falFalsNoBit_10 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_10 = restOfData.sub(162,178).decode();
        }

        self.falFalsNoBit_11 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x0800) >> 11);
        if (self.falFalsNoBit_11 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_11 = restOfData.sub(178,194).decode();
        }

        self.falFalsNoBit_12 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x1000) >> 12);
        if (self.falFalsNoBit_12 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_12 = restOfData.sub(194,210).decode();
        }

        self.falFalsNoBit_13 = OMRON_FINS_ENUMS::Enabled((self.falFalsNoBits & 0x2000) >> 13);
        if (self.falFalsNoBit_13 == OMRON_FINS_ENUMS::Enabled::TRUE) {
            self.falFalsNo_13 = restOfData.sub(210,226).decode();
        }
    }
};

