module OMRON_FINS_COMMAND_CODE_22;

import spicy;
import zeek;
import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;
import OMRON_FINS_TYPES;

#
# FileNameRead
#
type FileNameRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileNameRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileNameRead_Response();
    };
};

type FileNameRead_Command = unit {
    diskNo                : uint16;
    beginningFilePosition : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    noOfFiles             : uint16;
};

type FileNameRead_Response = unit {
    responseCode  : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    diskData      : OMRON_FINS_TYPES::DiskData;
    noOfFiles     : OMRON_FINS_TYPES::NoOfFiles;
    fileData      : OMRON_FINS_TYPES::FileData[self.noOfFiles.filesRead];
};

#
# SingleFileRead
#
type SingleFileRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : SingleFileRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: SingleFileRead_Response();
    };
};

type SingleFileRead_Command = unit {
    diskNo       : uint16;
    fileName     : OMRON_FINS_TYPES::FileName;
    filePosition : uint32;
    dataLength   : uint16;
};

type SingleFileRead_Response = unit {
    var fuid     : string;
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    fileCapacity : uint32;
    filePosition : uint32;
    dataLength   : uint16;
    fileData     : bytes &size=self.dataLength;

    on %done {
        self.fuid = zeek::file_begin();
        zeek::file_set_size(self.dataLength);
        zeek::file_data_in(self.fileData);
        zeek::file_end();
    }
};

#
# SingleFileWrite
#
type SingleFileWrite = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : SingleFileWrite_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: SingleFileWrite_Response();
    };
};

type SingleFileWrite_Command = unit {
    var fuid      : string;
    diskNo        : uint16;
    parameterCode : uint16 &convert=OMRON_FINS_ENUMS::FileParameterCode($$);
    fileName      : OMRON_FINS_TYPES::FileName;
    filePosition  : uint32;
    dataLength    : uint16;
    fileData      : bytes &size=self.dataLength;

    on %done {
        self.fuid = zeek::file_begin();
        zeek::file_set_size(self.dataLength);
        zeek::file_data_in(self.fileData);
        zeek::file_end();
    }

};

type SingleFileWrite_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
};

#
# MemoryCardFormat
#
type MemoryCardFormat = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : MemoryCardFormat_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: MemoryCardFormat_Reponse();
    };
};

type MemoryCardFormat_Command = unit {
    diskNo : uint16;
};

type MemoryCardFormat_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
};

#
# FileDelete
#
type FileDelete = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileDelete_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileDelete_Reponse();
    };
};

type FileDelete_Command = unit {
    diskNo    : uint16;
    noOfFiles : uint16;
    fileNames : OMRON_FINS_TYPES::FileName[self.noOfFiles];
};

type FileDelete_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    noOfFiles    : uint16;
};

#
# VolumeLabelCreateDelete
#
type VolumeLabelCreateDelete = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : VolumeLabelCreateDelete_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: VolumeLabelCreateDelete_Reponse();
    };
};

type VolumeLabelCreateDelete_Command = unit {
    var volumeLabel : string;
    diskNo          : uint16;
    parameterCode   : uint16 &convert=OMRON_FINS_ENUMS::VolumeParameterCode($$);
    data            : bytes &eod;

    on %done {
        if (|self.data| > 0) {
            self.volumeLabel = self.data.decode();
        }
    }
};

type VolumeLabelCreateDelete_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
};

#
# FileCopy
#
type FileCopy = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileCopy_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileCopy_Reponse();
    };
};

type FileCopy_Command = unit {
    srcDiskNo   : uint16;
    srcFileName : OMRON_FINS_TYPES::FileName;
    dstDiskNo   : uint16;
    dstFileName : OMRON_FINS_TYPES::FileName;
};

type FileCopy_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
};

#
# FileNameChange
#
type FileNameChange = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileNameChange_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileNameChange_Reponse();
    };
};

type FileNameChange_Command = unit {
    diskNo      : uint16;
    newFileName : OMRON_FINS_TYPES::FileName;
    oldFileName : OMRON_FINS_TYPES::FileName;
};

type FileNameChange_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
};

#
# FileDataCheck
#
type FileDataCheck = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileDataCheck_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileDataCheck_Reponse();
    };
};

type FileDataCheck_Command = unit {
    diskNo      : uint16;
    fileName : OMRON_FINS_TYPES::FileName;
};

type FileDataCheck_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
};

#
# MemoryAreaFileTransfer
#
type MemoryAreaFileTransfer = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : MemoryAreaFileTransfer_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: MemoryAreaFileTransfer_Reponse();
    };
};

type MemoryAreaFileTransfer_Command = unit {
    parameterCode     : uint16 &convert=OMRON_FINS_ENUMS::FileTransferParameterCode($$);
    memoryAreaCode    : uint8  &convert=OMRON_FINS_ENUMS::MemoryArea($$);
    beginningAddress  : bytes  &size=3  &convert=OMRON_FINS_FUNCTIONS::bytesToHexString($$);
    noOfItems         : uint16;
    diskNo            : uint16;
    fileName          : OMRON_FINS_TYPES::FileName;
};

type MemoryAreaFileTransfer_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    noOfItems    : uint16;
};

#
# ParameterAreaFileTransfer
#
type ParameterAreaFileTransfer = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : ParameterAreaFileTransfer_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: ParameterAreaFileTransfer_Reponse();
    };
};

type ParameterAreaFileTransfer_Command = unit {
    parameterCode     : uint16 &convert=OMRON_FINS_ENUMS::FileTransferParameterCode($$);
    parameterAreaCode : uint16 &convert=OMRON_FINS_ENUMS::ParameterAreaCode($$);
    beginningAddress  : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    noOfWords         : uint16;
    diskNo            : uint16;
    fileName          : OMRON_FINS_TYPES::FileName;
};

type ParameterAreaFileTransfer_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    noOfWords    : uint16;
};

#
# ProgramAreaFileTransfer
#
type ProgramAreaFileTransfer = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : ProgramAreaFileTransfer_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: ProgramAreaFileTransfer_Reponse();
    };
};

type ProgramAreaFileTransfer_Command = unit {
    data         : bytes &eod;
};

type ProgramAreaFileTransfer_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    data         : bytes &eod;
};

#
# FileMemoryIndexRead
#
type FileMemoryIndexRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileMemoryIndexRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileMemoryIndexRead_Reponse();
    };
};

type FileMemoryIndexRead_Command = unit {
    data         : bytes &eod;
};

type FileMemoryIndexRead_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    data         : bytes &eod;
};

#
# FileMemoryRead
#
type FileMemoryRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileMemoryRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileMemoryRead_Reponse();
    };
};

type FileMemoryRead_Command = unit {
    data         : bytes &eod;
};

type FileMemoryRead_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    data         : bytes &eod;
};

#
# FileMemoryWrite
#
type FileMemoryWrite = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : FileMemoryWrite_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: FileMemoryWrite_Reponse();
    };
};

type FileMemoryWrite_Command = unit {
    data         : bytes &eod;
};

type FileMemoryWrite_Reponse = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    data         : bytes &eod;
};