module OMRON_FINS_TYPES;

import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;

#
# MemoryAreaCommandType
#
type MemoryAreaCommandType = unit {
    memoryAreaCode      : uint8 &convert=OMRON_FINS_ENUMS::MemoryArea($$);
    beginningAddress    : bytes &size=3 &convert=OMRON_FINS_FUNCTIONS::bytesToHexString($$);
};

#
# MemoryAreaReadResponseType
#
type MemoryAreaReadResponseType = unit {
    var data: string;
    memoryAreaCode      : uint8 &convert=OMRON_FINS_ENUMS::MemoryArea($$);

    switch(self.memoryAreaCode) {
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__BIT_STATUS                  -> data1   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__BIT_STATUS_FORCED_STATUS    -> data2   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__WORD_CONTENTS               -> data3   : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__WORD_CONTENTS_FORCED_STATUS -> data4   : bytes &size=4 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TIMER_COUNTER__COMPLETION_FLAG_STATUS                          -> data5   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TIMER_COUNTER__COMPLETION_FLAG_STATUS_FORCED_STATUS            -> data6   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TIMER_COUNTER__PV                                              -> data7   : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::DM__WORD_CONTENTS                                              -> data8   : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TRANSITION__FLAG_STATUS                                        -> data9   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TRANSITION__FLAG_STATUS_FORCED_STATUS                          -> data10  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::STEP__FLAG_STATUS                                              -> data11  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::STEP__STATUS                                                   -> data12  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::STEP__STEP_TIME_PV                                             -> data13  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::FORCED_STATUS__BIT_STATUS                                      -> data14  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::FORCED_STATUS__WORD_CONTENTS                                   -> data15  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::ACTION__FLAG_STATUS                                            -> data16  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::REGISTER__REGISTER_CONTENTS                                    -> data17  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::INTERRUPT__SCHEDULED_INTERRUPT_INTERVAL                        -> data18  : bytes &size=4 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_90                                 -> data19  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_91                                 -> data20  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_92                                 -> data21  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_93                                 -> data22  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_94                                 -> data23  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_95                                 -> data24  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_96                                 -> data25  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_97                                 -> data26  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_98                                 -> data27  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        *                                                                                            -> unknown : bytes &eod    { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); } 
    };
};

type BlockRecordRead = unit {
    nodeNum : bitfield(8) {
        numOfLinkNodes : 0..6;
        dataLinkStatus : 7 &convert=OMRON_FINS_ENUMS::DataLinkStatus($$);
    };
    cioAreaFirstWord : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    kindOfDM         : uint8  &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    dmAreaFirstWord  : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    numOfTotalWords  : uint16;
};

type BlockRecordWrite = unit {
    nodeNumMask : bitfield(8) {
        nodeNum : 0..6;
        bit7    : 7;
    };
    cioAreaFirstWord : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    kindOfDM         : uint8  &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    dmAreaFirstWord  : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    numOfTotalWords  : uint16;
};

type Unit = unit {
    unitAddress : uint8 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    modelNumber : bytes &size=20;
};

#
# Network Status Read
#
type NodeDetails = unit {
    nodeData : bitfield(8) {
        inNetwork_1  : 0 &convert=OMRON_FINS_ENUMS::InNetwork($$);
        exitStatus_1 : 1 &convert=OMRON_FINS_ENUMS::ExitStatus($$);
        reserved_1   : 2;
        polling_1    : 3 &convert=OMRON_FINS_ENUMS::Polling($$);
        inNetwork_2  : 4 &convert=OMRON_FINS_ENUMS::InNetwork($$);
        exitStatus_2 : 5 &convert=OMRON_FINS_ENUMS::ExitStatus($$);
        reserved_2   : 6;
        polling_2    : 7 &convert=OMRON_FINS_ENUMS::Polling($$);
    };
};

type NetworkMemberData = unit {
    nodes  : NodeDetails()[31];
};

type CyclicNonFatalErrorData = unit {
    nodeData : bitfield(8) {
        nonFatalError_0 : 0 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_1 : 1 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_2 : 2 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_3 : 3 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_4 : 4 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_5 : 5 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_6 : 6 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_7 : 7 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
    };
};

type CyclicNonFatalErrors = unit {
    nodes : CyclicNonFatalErrorData()[8];  
};
