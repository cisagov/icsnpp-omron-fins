module OMRON_FINS_TYPES;

import spicy;
import OMRON_FINS_ENUMS;
import OMRON_FINS_ERROR_CODES;
import OMRON_FINS_FUNCTIONS;

#
# MemoryAreaCommandType
#
type MemoryAreaCommandType = unit {
    memoryAreaCode      : uint8 &convert=OMRON_FINS_ENUMS::MemoryArea($$);
    beginningAddress    : bytes &size=3 &convert=OMRON_FINS_FUNCTIONS::bytesToHexString($$);
};

#
# MemoryAreaReadResponseType
#
type MemoryAreaReadResponseType = unit {
    var data: string;
    memoryAreaCode      : uint8 &convert=OMRON_FINS_ENUMS::MemoryArea($$);

    switch(self.memoryAreaCode) {
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__BIT_STATUS                  -> data1   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__BIT_STATUS_FORCED_STATUS    -> data2   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__WORD_CONTENTS               -> data3   : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::CIO_TR_CPU_BUS_LINK_AND_AUXILIARY__WORD_CONTENTS_FORCED_STATUS -> data4   : bytes &size=4 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TIMER_COUNTER__COMPLETION_FLAG_STATUS                          -> data5   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TIMER_COUNTER__COMPLETION_FLAG_STATUS_FORCED_STATUS            -> data6   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TIMER_COUNTER__PV                                              -> data7   : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::DM__WORD_CONTENTS                                              -> data8   : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TRANSITION__FLAG_STATUS                                        -> data9   : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::TRANSITION__FLAG_STATUS_FORCED_STATUS                          -> data10  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::STEP__FLAG_STATUS                                              -> data11  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::STEP__STATUS                                                   -> data12  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::STEP__STEP_TIME_PV                                             -> data13  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::FORCED_STATUS__BIT_STATUS                                      -> data14  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::FORCED_STATUS__WORD_CONTENTS                                   -> data15  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::ACTION__FLAG_STATUS                                            -> data16  : bytes &size=1 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::REGISTER__REGISTER_CONTENTS                                    -> data17  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::INTERRUPT__SCHEDULED_INTERRUPT_INTERVAL                        -> data18  : bytes &size=4 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_90                                 -> data19  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_91                                 -> data20  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_92                                 -> data21  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_93                                 -> data22  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_94                                 -> data23  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_95                                 -> data24  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_96                                 -> data25  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_97                                 -> data26  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        OMRON_FINS_ENUMS::MemoryArea::EXPANSION_DM__WORD_CONTENTS_98                                 -> data27  : bytes &size=2 { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); }
        *                                                                                            -> unknown : bytes &eod    { self.data=OMRON_FINS_FUNCTIONS::bytesToHexString($$); } 
    };
};

type BlockRecordRead = unit {
    nodeNum : bitfield(8) {
        numOfLinkNodes : 0..6;
        dataLinkStatus : 7 &convert=OMRON_FINS_ENUMS::DataLinkStatus($$);
    };
    cioAreaFirstWord : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    kindOfDM         : uint8  &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    dmAreaFirstWord  : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    numOfTotalWords  : uint16;
};

type BlockRecordWrite = unit {
    nodeNumMask : bitfield(8) {
        nodeNum : 0..6;
        bit7    : 7;
    };
    cioAreaFirstWord : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    kindOfDM         : uint8  &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    dmAreaFirstWord  : uint16 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    numOfTotalWords  : uint16;
};

type Unit = unit {
    unitAddress : uint8 &convert=OMRON_FINS_FUNCTIONS::uintToHexString($$);
    modelNumber : bytes &size=20;
};

#
# Network Status Read: Network Member Data.
#
# Format:
# Four bits are allocated to each number to provide information on the status of notes in the network as shown
# below.  The function of each of the 4 bits is shown in the diagram following the table.
#     ---------------------------------------------
#     | Byte  |  Bits 4 to 7     | Bits 0 to 3    |
#     ---------------------------------------------
#     | Byte 1 | Node number 2   | Node number 1  |
#     | Byte 2 | Node number 4   | Node number 3  |
#     |    .   |      .          |      .         |
#     |    .   |      .          |      .         |
#     |    .   |      .          |      .         |
#     | Byte 31 | Node number 62 | Node number 61 |
#     ---------------------------------------------
#
#     Bit  3/7   2/6  1/5  0/4
#         --------------------
#         |    |  0 |    |   |
#         --------------------
#           |         |    |--------> 1: In Network (0: Not in network)
#           |         |-------------> 1: Exited because of error.  (0: Normal exit)
#           |-----------------------> 1: Unit does not respond to polling
#
type NodeDetails = unit {
    nodeData : bitfield(8) {
        inNetwork_1  : 0 &convert=OMRON_FINS_ENUMS::InNetwork($$);
        exitStatus_1 : 1 &convert=OMRON_FINS_ENUMS::ExitStatus($$);
        reserved_1   : 2;
        polling_1    : 3 &convert=OMRON_FINS_ENUMS::Polling($$);
        inNetwork_2  : 4 &convert=OMRON_FINS_ENUMS::InNetwork($$);
        exitStatus_2 : 5 &convert=OMRON_FINS_ENUMS::ExitStatus($$);
        reserved_2   : 6;
        polling_2    : 7 &convert=OMRON_FINS_ENUMS::Polling($$);
    };
};

type NetworkMemberData = unit {
    nodes  : NodeDetails()[31];
};


#
# Network Status Read: Cyclic non-fatal errors
#
# Format:
# These eight bytes indicate nodes in which non-fatal error occurred in cyclic transmission.  When a bit in the following matrix is ON, a
# non-fatal error occurred in the corresponding node.  Bit 0 of the first byte and bit 7 of the eighth byte are always OFF
#
#             Bit    7    6    5    4    3    2    1    0
#                 -----------------------------------------
#      First byte |  7 |  6 |  5 |  4 |  3 |  2 |  1 |  - |
#     Second byte | 15 | 14 | 13 | 12 | 11 | 10 |  9 |  8 |
#      Third byte | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 |
#     Fourth byte | 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 |
#      Fifth byte | 39 | 38 | 37 | 36 | 35 | 34 | 33 | 32 |
#      Sixth byte | 47 | 46 | 45 | 44 | 43 | 42 | 41 | 40 |
#    Seventh byte | 55 | 54 | 53 | 52 | 51 | 50 | 49 | 48 |
#     Eighth byte |  - | 62 | 61 | 60 | 59 | 58 | 57 | 56 |
#                 -----------------------------------------
#
type CyclicNonFatalErrorData = unit {
    nodeData : bitfield(8) {
        nonFatalError_0 : 0 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_1 : 1 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_2 : 2 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_3 : 3 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_4 : 4 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_5 : 5 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_6 : 6 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
        nonFatalError_7 : 7 &convert=OMRON_FINS_ENUMS::NonFatalErrorStatus($$);
    };
};

type CyclicNonFatalErrors = unit {
    nodes : CyclicNonFatalErrorData()[8];  
};

#
# Data Link Status Read: Error
#
type Error = unit {
    error : bitfield(8) {
        error_0 : 0 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
        error_1 : 1 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
        error_2 : 2 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
        error_3 : 3 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
        error_4 : 4 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
        error_5 : 5 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
        error_6 : 6 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
        error_7 : 7 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadError($$);
    };
};

#
# Data Link Status Read: Warning
#
type Warning = unit {
    warning : bitfield(8) {
        warning_0 : 0 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
        warning_1 : 1 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
        warning_2 : 2 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
        warning_3 : 3 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
        warning_4 : 4 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
        warning_5 : 5 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
        warning_6 : 6 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
        warning_7 : 7 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadWarning($$);
    };
};

#
# Data Link Status Read: Mode
#
type Mode = unit {
    mode : bitfield(8) {
        mode_0 : 0 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
        mode_1 : 1 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
        mode_2 : 2 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
        mode_3 : 3 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
        mode_4 : 4 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
        mode_5 : 5 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
        mode_6 : 6 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
        mode_7 : 7 &convert=OMRON_FINS_ENUMS::DataLinkStatusReadMode($$);
    };
};

#
# Data Link Status Read: Status
#
type Status = unit {
    error   : Error;
    mode    : Mode;
    warning : Warning;
};

#
# MessageRead, Message Clear, and Fal/Fals Read
#
type MessageNoParameter = bitfield(16) {
        messageType                  : 14..15 &convert=OMRON_FINS_ENUMS::MessageType($$);
        reservedBit_or_falFalsBit_13 : 13     &convert=OMRON_FINS_ENUMS::Enabled($$);
        reservedBit_or_falFalsBit_12 : 12     &convert=OMRON_FINS_ENUMS::Enabled($$);
        reservedBit_or_falFalsBit_11 : 11     &convert=OMRON_FINS_ENUMS::Enabled($$);
        reservedBit_or_falFalsBit_10 : 10     &convert=OMRON_FINS_ENUMS::Enabled($$);
        reservedBit_or_falFalsBit_9  : 9      &convert=OMRON_FINS_ENUMS::Enabled($$);
        reservedBit_or_falFalsBit_8  : 8      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_7 : 7      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_6 : 6      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_5 : 5      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_4 : 4      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_3 : 3      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_2 : 2      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_1 : 1      &convert=OMRON_FINS_ENUMS::Enabled($$);
        messageNoBit_or_falFalsBit_0 : 0      &convert=OMRON_FINS_ENUMS::Enabled($$);
    };

#
# Error noOfRecords
#
type ErrorRecord = unit {
    errorCode1 : uint16 &convert=OMRON_FINS_ERROR_CODES::ErrorCode($$);
    errorCode2 : uint16 &convert=OMRON_FINS_ERROR_CODES::ErrorCode($$);
    minute     : uint8;
    second     : uint8;
    day        : uint8;
    hour       : uint8;
    year       : uint8;
    month      : uint8;
};

#
# FileNameRead: DiskData
#
type DiskData = unit {
    volumeLabel    : bytes &size=12;
    dateTime       : DateTime;
    totalCapacity  : uint32;
    unusedCapacity : uint32;
    totalNoFiles   : uint16;
};

#
# FileNameRead: DateTime
#
type DateTime = unit {
    dateTime : bitfield(32) {
        year   : 25..31;
        month  : 21..24;
        day    : 16..20;
        hour   : 11..15;
        minute : 5..10;
        second : 0..4;
    };
};

#
# FileNameRead: NoOfFiles
#
type NoOfFiles = unit {
    var filesRead : uint16;
    var lastFile  : bool;
    numOfFiles : bitfield(16) {
        lastFile    : 15 &convert=cast<bool>($$);
        noFilesRead : 0..14;
    };

    on %done {
        self.filesRead = self.numOfFiles.noFilesRead;
        self.lastFile  = self.numOfFiles.lastFile;
    }
};

#
# FileNameRead: FileData
#
type FileData = unit {
   fileName     : FileName;
   dateTime     : DateTime;
   fileCapacity : uint32; 
};

type FileName = unit {
    fileName : bytes &size=12;
};

type DataTypeControlData = unit {
    dataType : bitfield(8) {
        lastBlock : 7     &convert=OMRON_FINS_ENUMS::Enabled($$);
        protected : 6     &convert=OMRON_FINS_ENUMS::Enabled($$);
        reserved  : 3..5;
        dataType  : 0..2  &convert=OMRON_FINS_ENUMS::ControlDataType($$);
    };
    controlData : uint8;
};

type ForcedSetResetData = unit {
    # Variable to hold the 3 byte bit flag as a uint
    var bitFlag          : uint64;

    setResetSpecification : uint16 &convert=OMRON_FINS_ENUMS::SetResetSpecification($$);
    memoryAreaCode        : uint8 &convert=OMRON_FINS_ENUMS::MemoryArea($$);
    bitFlagBytes          : bytes &size=3;

    on %done {
       # Convert the 3 byte bitFlag to a uint
       self.bitFlag = self.bitFlagBytes.to_uint(spicy::ByteOrder::Network);
    }
};

#
# Binary Coded Decimal (BCD) is another process for converting decimal numbers into their binary 
# equivalents.  It is a form of binary encoding where each digit is a decimal number represented
# in the form of bits.  The encoding can be done in either 4-bit or 8-bit (usually 4-bit is 
# preferred).  The parser assumes 4-bit encoding.
#
# Reference: 
#    https://geeksforgeeks.org/bcd-or-binary-coded-decimal
#
type BCDEncoding = unit {
    var bcdValue : uint64;
    dataType : bitfield(8) {
        firstDigit  : 4..7 &convert=cast<uint8>($$);
        secondDigit : 0..3 &convert=cast<uint8>($$);
    };
    on %done {
        self.bcdValue = (self.dataType.firstDigit * 10) + self.dataType.secondDigit;
    }
};
