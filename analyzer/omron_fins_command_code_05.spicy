module OMRON_FINS_COMMAND_CODE_05;

import spicy;
import OMRON_FINS_ENUMS;
import OMRON_FINS_FUNCTIONS;
import OMRON_FINS_TYPES;

#
# ControllerDataRead
#
type ControllerDataRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : ControllerDataRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: ControllerDataRead_Response();
    };
};

public type ControllerDataRead_Command = unit {
    var controllerData : OMRON_FINS_ENUMS::ControllerData;

    data : bytes &eod;

    on %done {
        if ( |self.data| == 1) {
            self.controllerData = OMRON_FINS_ENUMS::ControllerData(*self.data.at(0));
        }
    }
};

#
# Controller Data Read response
#
# Parsing the Controller Data Read response is a little different from parsing
# other command repsonses.  In reviewing the test packet capture, it became 
# apparent that at the point the response can be parsed, the context of the data
# to be read, which is specified as the 3rd byte of the controller data read 
# command, has been lost.  In order to determine the data to be read 
# (Controller Model, CPU Bus Unit, or Both), the code parses the data as bytes
# to &eod and checks the length of the data.  If the length is 92 bytes, then 
# the data to be read is Controller Model data.  If the length is 67 bytes, then 
# the data to be read is CPU Bus Unit data.  Otherwise, both Controller Model 
# data and CPU Bus Unit data is read.  Once parsed, unit variables representing 
# the detailed data are set by indexing into the &eod byte array.
#
public type ControllerDataRead_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
    dataToRead : bytes &eod;

    #
    # Controller Model - Data to read specified as 00
    #
    var controllerModel      : string;  # &size=20;
    var controllerVersion    : string;  # &size=20;
    var forSystemUse         : string;  # &size=40;
    var programAreaSize      : uint64;  # &size=2
    var iomSize              : uint64;  # &size=1
    var noOfDMWords          : uint64;  # &size=2
    var timerSize            : uint64;  # &size=1
    var expansionDMSize      : uint64;  # &size=1
    var noOfStepsTransitions : uint64;  # &size=2
    var kindOfMemoryCard     : OMRON_FINS_ENUMS::KindOfMemoryCard; # &size=1
    var memoryCardSize       : uint64;  # &size=2

    #
    # CPU Bus Unit - Data to read specified as 01
    #
    var cpuBusUnitConfig             : vector<uint64>;  # 64 bytes
    var remoteIOData                 : uint64;          # 2 bytes
    var noOfSysmacBusMastersMounted  : uint64;          # 1 bytes
    var noOfSysmacBus2MastersMounted : uint64;          # 1 bytes
    var pcStatus                     : uint64;          # 1 byte
    on %done {

        #
        # Data to read specified as Controller Model (00)
        #
        if (|self.dataToRead| == 92) {  
            self.controllerModel = self.dataToRead.sub(0,20).decode();
            self.controllerVersion = self.dataToRead.sub(20,40).decode();
            self.forSystemUse = self.dataToRead.sub(40,80).decode();
            self.programAreaSize = self.dataToRead.sub(80,82).to_uint(spicy::ByteOrder::Network);
            self.iomSize = self.dataToRead.sub(82,83).to_uint(spicy::ByteOrder::Network);
            self.noOfDMWords = self.dataToRead.sub(83,85).to_uint(spicy::ByteOrder::Network);
            self.timerSize = self.dataToRead.sub(85,86).to_uint(spicy::ByteOrder::Network);
            self.expansionDMSize = self.dataToRead.sub(86,87).to_uint(spicy::ByteOrder::Network);
            self.noOfStepsTransitions = self.dataToRead.sub(87,89).to_uint(spicy::ByteOrder::Network);
            self.kindOfMemoryCard = OMRON_FINS_ENUMS::KindOfMemoryCard(self.dataToRead.sub(89,90).to_int(spicy::ByteOrder::Network));
            self.memoryCardSize = self.dataToRead.sub(90,92).to_uint(spicy::ByteOrder::Network);

        #
        # Data to read specified as CPU Bus Unit (01)
        #
        } else if (|self.dataToRead| == 67) {
            #
            # CPU UNit Config bytes 0-32 contain data; bytes 33-64 are reserved (0x20) and not logged
            #
            self.cpuBusUnitConfig.assign(0,  self.dataToRead.sub(0,2).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(1,  self.dataToRead.sub(2,4).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(2,  self.dataToRead.sub(4,6).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(3,  self.dataToRead.sub(6,8).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(4,  self.dataToRead.sub(8,10).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(5,  self.dataToRead.sub(10,12).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(6,  self.dataToRead.sub(12,14).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(7,  self.dataToRead.sub(14,15).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(8,  self.dataToRead.sub(16,18).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(9,  self.dataToRead.sub(18,20).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(10, self.dataToRead.sub(20,22).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(11, self.dataToRead.sub(22,24).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(12, self.dataToRead.sub(24,26).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(13, self.dataToRead.sub(26,28).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(14, self.dataToRead.sub(28,30).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(15, self.dataToRead.sub(30,32).to_uint(spicy::ByteOrder::Network));

            self.noOfSysmacBusMastersMounted  = self.dataToRead.sub(64, 65).to_uint(spicy::ByteOrder::Network);
            self.noOfSysmacBus2MastersMounted = self.dataToRead.sub(65, 66).to_uint(spicy::ByteOrder::Network);

            self.pcStatus = self.dataToRead.sub(66, 67).to_uint(spicy::ByteOrder::Network);

        #
        # Data to read is omitted - parse both Controller Model and CPU Bus Unit
        #
        } else { 
            self.controllerModel = self.dataToRead.sub(0,20).decode();
            self.controllerVersion = self.dataToRead.sub(20,40).decode();
            self.forSystemUse = self.dataToRead.sub(40,80).decode();
            self.programAreaSize = self.dataToRead.sub(80,82).to_uint(spicy::ByteOrder::Network);
            self.iomSize = self.dataToRead.sub(82,83).to_uint(spicy::ByteOrder::Network);
            self.noOfDMWords = self.dataToRead.sub(83,85).to_uint(spicy::ByteOrder::Network);
            self.timerSize = self.dataToRead.sub(85,86).to_uint(spicy::ByteOrder::Network);
            self.expansionDMSize = self.dataToRead.sub(86,87).to_uint(spicy::ByteOrder::Network);
            self.noOfStepsTransitions = self.dataToRead.sub(87,89).to_uint(spicy::ByteOrder::Network);
            self.kindOfMemoryCard = OMRON_FINS_ENUMS::KindOfMemoryCard(self.dataToRead.sub(89,90).to_int(spicy::ByteOrder::Network));
            self.memoryCardSize = self.dataToRead.sub(90,92).to_uint(spicy::ByteOrder::Network);

            #
            # CPU UNit Config bytes 0-32 contain data; bytes 33-64 are reserved (0x20) and not logged
            #
            self.cpuBusUnitConfig.assign(0,  self.dataToRead.sub(92,94).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(1,  self.dataToRead.sub(94,96).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(2,  self.dataToRead.sub(96,98).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(3,  self.dataToRead.sub(98,100).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(4,  self.dataToRead.sub(100,102).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(5,  self.dataToRead.sub(102,104).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(6,  self.dataToRead.sub(104,106).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(7,  self.dataToRead.sub(106,108).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(8,  self.dataToRead.sub(108,110).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(9,  self.dataToRead.sub(110,112).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(10, self.dataToRead.sub(112,114).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(11, self.dataToRead.sub(114,116).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(12, self.dataToRead.sub(116,118).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(13, self.dataToRead.sub(118,120).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(14, self.dataToRead.sub(120,122).to_uint(spicy::ByteOrder::Network));
            self.cpuBusUnitConfig.assign(15, self.dataToRead.sub(122,124).to_uint(spicy::ByteOrder::Network));

            self.noOfSysmacBusMastersMounted  = self.dataToRead.sub(156, 157).to_uint(spicy::ByteOrder::Network);
            self.noOfSysmacBus2MastersMounted = self.dataToRead.sub(157, 158).to_uint(spicy::ByteOrder::Network);
            self.pcStatus = self.dataToRead.sub(158, 159).to_uint(spicy::ByteOrder::Network);

        }
    }
};

#
# ConnectionDataRead
#
type ConnectionDataRead = unit(dataType: OMRON_FINS_ENUMS::DataType) {
    switch(dataType) {
        OMRON_FINS_ENUMS::DataType::COMMAND  -> command : ConnectionDataRead_Command();
        OMRON_FINS_ENUMS::DataType::RESPONSE -> response: ConnectionDataRead_Response();
    };
};

type ConnectionDataRead_Command = unit {
};

type ConnectionDataRead_Response = unit {
    responseCode : uint16 &convert=OMRON_FINS_ENUMS::ResponseCode($$);
};
